// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cysicmint/govtoken/v1/tx.proto

package types

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/tx"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgMint
type MsgMint struct {
	// owner
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	// recipient
	Recipient string `protobuf:"bytes,2,opt,name=recipient,proto3" json:"recipient,omitempty"`
	// amount
	Amount cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount" yaml:"amount"`
}

func (m *MsgMint) Reset()         { *m = MsgMint{} }
func (m *MsgMint) String() string { return proto.CompactTextString(m) }
func (*MsgMint) ProtoMessage()    {}
func (*MsgMint) Descriptor() ([]byte, []int) {
	return fileDescriptor_65790aa7cc6b2fc7, []int{0}
}
func (m *MsgMint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMint.Merge(m, src)
}
func (m *MsgMint) XXX_Size() int {
	return m.Size()
}
func (m *MsgMint) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMint.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMint proto.InternalMessageInfo

func (m *MsgMint) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgMint) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

// MsgMintResponse
type MsgMintResponse struct {
}

func (m *MsgMintResponse) Reset()         { *m = MsgMintResponse{} }
func (m *MsgMintResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMintResponse) ProtoMessage()    {}
func (*MsgMintResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_65790aa7cc6b2fc7, []int{1}
}
func (m *MsgMintResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMintResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMintResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMintResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMintResponse.Merge(m, src)
}
func (m *MsgMintResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMintResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMintResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMintResponse proto.InternalMessageInfo

// MsgBurn
type MsgBurn struct {
	// burner
	Burner string `protobuf:"bytes,1,opt,name=burner,proto3" json:"burner,omitempty"`
	// amount
	Amount cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount" yaml:"amount"`
}

func (m *MsgBurn) Reset()         { *m = MsgBurn{} }
func (m *MsgBurn) String() string { return proto.CompactTextString(m) }
func (*MsgBurn) ProtoMessage()    {}
func (*MsgBurn) Descriptor() ([]byte, []int) {
	return fileDescriptor_65790aa7cc6b2fc7, []int{2}
}
func (m *MsgBurn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBurn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBurn.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBurn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBurn.Merge(m, src)
}
func (m *MsgBurn) XXX_Size() int {
	return m.Size()
}
func (m *MsgBurn) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBurn.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBurn proto.InternalMessageInfo

func (m *MsgBurn) GetBurner() string {
	if m != nil {
		return m.Burner
	}
	return ""
}

// MsgBurnResponse
type MsgBurnResponse struct {
}

func (m *MsgBurnResponse) Reset()         { *m = MsgBurnResponse{} }
func (m *MsgBurnResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBurnResponse) ProtoMessage()    {}
func (*MsgBurnResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_65790aa7cc6b2fc7, []int{3}
}
func (m *MsgBurnResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBurnResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBurnResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBurnResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBurnResponse.Merge(m, src)
}
func (m *MsgBurnResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBurnResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBurnResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBurnResponse proto.InternalMessageInfo

// MsgChangeOwner
type MsgChangeOwner struct {
	// old_owner
	OldOwner string `protobuf:"bytes,1,opt,name=old_owner,json=oldOwner,proto3" json:"old_owner,omitempty"`
	// new_owner
	NewOwner string `protobuf:"bytes,2,opt,name=new_owner,json=newOwner,proto3" json:"new_owner,omitempty"`
}

func (m *MsgChangeOwner) Reset()         { *m = MsgChangeOwner{} }
func (m *MsgChangeOwner) String() string { return proto.CompactTextString(m) }
func (*MsgChangeOwner) ProtoMessage()    {}
func (*MsgChangeOwner) Descriptor() ([]byte, []int) {
	return fileDescriptor_65790aa7cc6b2fc7, []int{4}
}
func (m *MsgChangeOwner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgChangeOwner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgChangeOwner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgChangeOwner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgChangeOwner.Merge(m, src)
}
func (m *MsgChangeOwner) XXX_Size() int {
	return m.Size()
}
func (m *MsgChangeOwner) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgChangeOwner.DiscardUnknown(m)
}

var xxx_messageInfo_MsgChangeOwner proto.InternalMessageInfo

func (m *MsgChangeOwner) GetOldOwner() string {
	if m != nil {
		return m.OldOwner
	}
	return ""
}

func (m *MsgChangeOwner) GetNewOwner() string {
	if m != nil {
		return m.NewOwner
	}
	return ""
}

// MsgChangeOwnerResponse
type MsgChangeOwnerResponse struct {
}

func (m *MsgChangeOwnerResponse) Reset()         { *m = MsgChangeOwnerResponse{} }
func (m *MsgChangeOwnerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgChangeOwnerResponse) ProtoMessage()    {}
func (*MsgChangeOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_65790aa7cc6b2fc7, []int{5}
}
func (m *MsgChangeOwnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgChangeOwnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgChangeOwnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgChangeOwnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgChangeOwnerResponse.Merge(m, src)
}
func (m *MsgChangeOwnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgChangeOwnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgChangeOwnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgChangeOwnerResponse proto.InternalMessageInfo

// MsgExchangeToGovToken
type MsgExchangeToGovToken struct {
	// sender
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// amount
	Amount cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount" yaml:"amount"`
}

func (m *MsgExchangeToGovToken) Reset()         { *m = MsgExchangeToGovToken{} }
func (m *MsgExchangeToGovToken) String() string { return proto.CompactTextString(m) }
func (*MsgExchangeToGovToken) ProtoMessage()    {}
func (*MsgExchangeToGovToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_65790aa7cc6b2fc7, []int{6}
}
func (m *MsgExchangeToGovToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgExchangeToGovToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgExchangeToGovToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgExchangeToGovToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgExchangeToGovToken.Merge(m, src)
}
func (m *MsgExchangeToGovToken) XXX_Size() int {
	return m.Size()
}
func (m *MsgExchangeToGovToken) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgExchangeToGovToken.DiscardUnknown(m)
}

var xxx_messageInfo_MsgExchangeToGovToken proto.InternalMessageInfo

func (m *MsgExchangeToGovToken) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

// MsgExchangeToGovTokenResponse
type MsgExchangeToGovTokenResponse struct {
	// received_amount
	ReceivedAmount cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=received_amount,json=receivedAmount,proto3,customtype=cosmossdk.io/math.Int" json:"received_amount" yaml:"received_amount"`
}

func (m *MsgExchangeToGovTokenResponse) Reset()         { *m = MsgExchangeToGovTokenResponse{} }
func (m *MsgExchangeToGovTokenResponse) String() string { return proto.CompactTextString(m) }
func (*MsgExchangeToGovTokenResponse) ProtoMessage()    {}
func (*MsgExchangeToGovTokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_65790aa7cc6b2fc7, []int{7}
}
func (m *MsgExchangeToGovTokenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgExchangeToGovTokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgExchangeToGovTokenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgExchangeToGovTokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgExchangeToGovTokenResponse.Merge(m, src)
}
func (m *MsgExchangeToGovTokenResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgExchangeToGovTokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgExchangeToGovTokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgExchangeToGovTokenResponse proto.InternalMessageInfo

// MsgExchangeToPlatformToken
type MsgExchangeToPlatformToken struct {
	// sender
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// amount
	Amount cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount" yaml:"amount"`
}

func (m *MsgExchangeToPlatformToken) Reset()         { *m = MsgExchangeToPlatformToken{} }
func (m *MsgExchangeToPlatformToken) String() string { return proto.CompactTextString(m) }
func (*MsgExchangeToPlatformToken) ProtoMessage()    {}
func (*MsgExchangeToPlatformToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_65790aa7cc6b2fc7, []int{8}
}
func (m *MsgExchangeToPlatformToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgExchangeToPlatformToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgExchangeToPlatformToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgExchangeToPlatformToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgExchangeToPlatformToken.Merge(m, src)
}
func (m *MsgExchangeToPlatformToken) XXX_Size() int {
	return m.Size()
}
func (m *MsgExchangeToPlatformToken) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgExchangeToPlatformToken.DiscardUnknown(m)
}

var xxx_messageInfo_MsgExchangeToPlatformToken proto.InternalMessageInfo

func (m *MsgExchangeToPlatformToken) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

// MsgExchangeToPlatformTokenResponse defines the response structure for executing a
// MsgExchangeToPlatformToken message.
type MsgExchangeToPlatformTokenResponse struct {
	// received_amount
	ReceivedAmount cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=received_amount,json=receivedAmount,proto3,customtype=cosmossdk.io/math.Int" json:"received_amount" yaml:"received_amount"`
}

func (m *MsgExchangeToPlatformTokenResponse) Reset()         { *m = MsgExchangeToPlatformTokenResponse{} }
func (m *MsgExchangeToPlatformTokenResponse) String() string { return proto.CompactTextString(m) }
func (*MsgExchangeToPlatformTokenResponse) ProtoMessage()    {}
func (*MsgExchangeToPlatformTokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_65790aa7cc6b2fc7, []int{9}
}
func (m *MsgExchangeToPlatformTokenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgExchangeToPlatformTokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgExchangeToPlatformTokenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgExchangeToPlatformTokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgExchangeToPlatformTokenResponse.Merge(m, src)
}
func (m *MsgExchangeToPlatformTokenResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgExchangeToPlatformTokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgExchangeToPlatformTokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgExchangeToPlatformTokenResponse proto.InternalMessageInfo

// MsgSetExchangeRate sets rate from platform to gov token
type MsgSetExchangeRate struct {
	// owner
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	// from_denom
	FromDenom string `protobuf:"bytes,2,opt,name=from_denom,json=fromDenom,proto3" json:"from_denom,omitempty"`
	// to_denom
	ToDenom string `protobuf:"bytes,3,opt,name=to_denom,json=toDenom,proto3" json:"to_denom,omitempty"`
	// rate
	Rate uint64 `protobuf:"varint,4,opt,name=rate,proto3" json:"rate,omitempty"`
}

func (m *MsgSetExchangeRate) Reset()         { *m = MsgSetExchangeRate{} }
func (m *MsgSetExchangeRate) String() string { return proto.CompactTextString(m) }
func (*MsgSetExchangeRate) ProtoMessage()    {}
func (*MsgSetExchangeRate) Descriptor() ([]byte, []int) {
	return fileDescriptor_65790aa7cc6b2fc7, []int{10}
}
func (m *MsgSetExchangeRate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetExchangeRate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetExchangeRate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetExchangeRate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetExchangeRate.Merge(m, src)
}
func (m *MsgSetExchangeRate) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetExchangeRate) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetExchangeRate.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetExchangeRate proto.InternalMessageInfo

func (m *MsgSetExchangeRate) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgSetExchangeRate) GetFromDenom() string {
	if m != nil {
		return m.FromDenom
	}
	return ""
}

func (m *MsgSetExchangeRate) GetToDenom() string {
	if m != nil {
		return m.ToDenom
	}
	return ""
}

func (m *MsgSetExchangeRate) GetRate() uint64 {
	if m != nil {
		return m.Rate
	}
	return 0
}

// MsgSetExchangeRateResponse
type MsgSetExchangeRateResponse struct {
}

func (m *MsgSetExchangeRateResponse) Reset()         { *m = MsgSetExchangeRateResponse{} }
func (m *MsgSetExchangeRateResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetExchangeRateResponse) ProtoMessage()    {}
func (*MsgSetExchangeRateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_65790aa7cc6b2fc7, []int{11}
}
func (m *MsgSetExchangeRateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetExchangeRateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetExchangeRateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetExchangeRateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetExchangeRateResponse.Merge(m, src)
}
func (m *MsgSetExchangeRateResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetExchangeRateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetExchangeRateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetExchangeRateResponse proto.InternalMessageInfo

// MsgStakeAsValidator defines the message to convert platform tokens to governance tokens and stake as a new validator.
type MsgStakeAsValidator struct {
	// sender is the account that sends the platform tokens.
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// amount is the amount of platform tokens to convert to governance tokens and stake.
	Amount cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount" yaml:"amount"`
	// validator_name is the name of the new validator to be created.
	ValidatorName string `protobuf:"bytes,3,opt,name=validator_name,json=validatorName,proto3" json:"validator_name,omitempty"`
	// validator_description is a description of the validator.
	ValidatorDescription string `protobuf:"bytes,4,opt,name=validator_description,json=validatorDescription,proto3" json:"validator_description,omitempty"`
	// commission_rate is the initial commission rate for the validator.
	CommissionRate string `protobuf:"bytes,5,opt,name=commission_rate,json=commissionRate,proto3" json:"commission_rate,omitempty"`
	// max_commission_rate is the maximum commission rate the validator can set.
	MaxCommissionRate string `protobuf:"bytes,6,opt,name=max_commission_rate,json=maxCommissionRate,proto3" json:"max_commission_rate,omitempty"`
	// max_change_commission_rate is the maximum amount the validator can change the commission rate.
	MaxChangeCommissionRate string `protobuf:"bytes,7,opt,name=max_change_commission_rate,json=maxChangeCommissionRate,proto3" json:"max_change_commission_rate,omitempty"`
	// validator_pubkey is the public key of the new validator.
	ValidatorPubkey string `protobuf:"bytes,8,opt,name=validator_pubkey,json=validatorPubkey,proto3" json:"validator_pubkey,omitempty"`
	// min_self_delegation is the minimum amount of governance tokens to self-delegate.
	MinSelfDelegation cosmossdk_io_math.Int `protobuf:"bytes,9,opt,name=min_self_delegation,json=minSelfDelegation,proto3,customtype=cosmossdk.io/math.Int" json:"min_self_delegation" yaml:"min_self_delegation"`
}

func (m *MsgStakeAsValidator) Reset()         { *m = MsgStakeAsValidator{} }
func (m *MsgStakeAsValidator) String() string { return proto.CompactTextString(m) }
func (*MsgStakeAsValidator) ProtoMessage()    {}
func (*MsgStakeAsValidator) Descriptor() ([]byte, []int) {
	return fileDescriptor_65790aa7cc6b2fc7, []int{12}
}
func (m *MsgStakeAsValidator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgStakeAsValidator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgStakeAsValidator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgStakeAsValidator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgStakeAsValidator.Merge(m, src)
}
func (m *MsgStakeAsValidator) XXX_Size() int {
	return m.Size()
}
func (m *MsgStakeAsValidator) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgStakeAsValidator.DiscardUnknown(m)
}

var xxx_messageInfo_MsgStakeAsValidator proto.InternalMessageInfo

func (m *MsgStakeAsValidator) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgStakeAsValidator) GetValidatorName() string {
	if m != nil {
		return m.ValidatorName
	}
	return ""
}

func (m *MsgStakeAsValidator) GetValidatorDescription() string {
	if m != nil {
		return m.ValidatorDescription
	}
	return ""
}

func (m *MsgStakeAsValidator) GetCommissionRate() string {
	if m != nil {
		return m.CommissionRate
	}
	return ""
}

func (m *MsgStakeAsValidator) GetMaxCommissionRate() string {
	if m != nil {
		return m.MaxCommissionRate
	}
	return ""
}

func (m *MsgStakeAsValidator) GetMaxChangeCommissionRate() string {
	if m != nil {
		return m.MaxChangeCommissionRate
	}
	return ""
}

func (m *MsgStakeAsValidator) GetValidatorPubkey() string {
	if m != nil {
		return m.ValidatorPubkey
	}
	return ""
}

// MsgStakeAsValidatorResponse
type MsgStakeAsValidatorResponse struct {
	// validation_result contains the result of staking.
	ValidationResult string `protobuf:"bytes,1,opt,name=validation_result,json=validationResult,proto3" json:"validation_result,omitempty"`
}

func (m *MsgStakeAsValidatorResponse) Reset()         { *m = MsgStakeAsValidatorResponse{} }
func (m *MsgStakeAsValidatorResponse) String() string { return proto.CompactTextString(m) }
func (*MsgStakeAsValidatorResponse) ProtoMessage()    {}
func (*MsgStakeAsValidatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_65790aa7cc6b2fc7, []int{13}
}
func (m *MsgStakeAsValidatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgStakeAsValidatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgStakeAsValidatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgStakeAsValidatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgStakeAsValidatorResponse.Merge(m, src)
}
func (m *MsgStakeAsValidatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgStakeAsValidatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgStakeAsValidatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgStakeAsValidatorResponse proto.InternalMessageInfo

func (m *MsgStakeAsValidatorResponse) GetValidationResult() string {
	if m != nil {
		return m.ValidationResult
	}
	return ""
}

// MsgDelegateToValidator defines the message to convert platform tokens to governance tokens and delegate to an
// existing validator.
type MsgDelegateToValidator struct {
	// sender is the account that sends the platform tokens.
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// amount is the amount of platform tokens to convert to governance tokens and delegate.
	Amount cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount" yaml:"amount"`
	// validator_address is the address of the validator to delegate governance tokens to.
	ValidatorAddress string `protobuf:"bytes,3,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
}

func (m *MsgDelegateToValidator) Reset()         { *m = MsgDelegateToValidator{} }
func (m *MsgDelegateToValidator) String() string { return proto.CompactTextString(m) }
func (*MsgDelegateToValidator) ProtoMessage()    {}
func (*MsgDelegateToValidator) Descriptor() ([]byte, []int) {
	return fileDescriptor_65790aa7cc6b2fc7, []int{14}
}
func (m *MsgDelegateToValidator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDelegateToValidator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDelegateToValidator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDelegateToValidator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDelegateToValidator.Merge(m, src)
}
func (m *MsgDelegateToValidator) XXX_Size() int {
	return m.Size()
}
func (m *MsgDelegateToValidator) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDelegateToValidator.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDelegateToValidator proto.InternalMessageInfo

func (m *MsgDelegateToValidator) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgDelegateToValidator) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

// MsgDelegateToValidatorResponse
type MsgDelegateToValidatorResponse struct {
	// delegation_result contains the result of the delegation.
	DelegationResult string `protobuf:"bytes,1,opt,name=delegation_result,json=delegationResult,proto3" json:"delegation_result,omitempty"`
}

func (m *MsgDelegateToValidatorResponse) Reset()         { *m = MsgDelegateToValidatorResponse{} }
func (m *MsgDelegateToValidatorResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDelegateToValidatorResponse) ProtoMessage()    {}
func (*MsgDelegateToValidatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_65790aa7cc6b2fc7, []int{15}
}
func (m *MsgDelegateToValidatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDelegateToValidatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDelegateToValidatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDelegateToValidatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDelegateToValidatorResponse.Merge(m, src)
}
func (m *MsgDelegateToValidatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDelegateToValidatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDelegateToValidatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDelegateToValidatorResponse proto.InternalMessageInfo

func (m *MsgDelegateToValidatorResponse) GetDelegationResult() string {
	if m != nil {
		return m.DelegationResult
	}
	return ""
}

func init() {
	proto.RegisterType((*MsgMint)(nil), "cysicmint.govtoken.v1.MsgMint")
	proto.RegisterType((*MsgMintResponse)(nil), "cysicmint.govtoken.v1.MsgMintResponse")
	proto.RegisterType((*MsgBurn)(nil), "cysicmint.govtoken.v1.MsgBurn")
	proto.RegisterType((*MsgBurnResponse)(nil), "cysicmint.govtoken.v1.MsgBurnResponse")
	proto.RegisterType((*MsgChangeOwner)(nil), "cysicmint.govtoken.v1.MsgChangeOwner")
	proto.RegisterType((*MsgChangeOwnerResponse)(nil), "cysicmint.govtoken.v1.MsgChangeOwnerResponse")
	proto.RegisterType((*MsgExchangeToGovToken)(nil), "cysicmint.govtoken.v1.MsgExchangeToGovToken")
	proto.RegisterType((*MsgExchangeToGovTokenResponse)(nil), "cysicmint.govtoken.v1.MsgExchangeToGovTokenResponse")
	proto.RegisterType((*MsgExchangeToPlatformToken)(nil), "cysicmint.govtoken.v1.MsgExchangeToPlatformToken")
	proto.RegisterType((*MsgExchangeToPlatformTokenResponse)(nil), "cysicmint.govtoken.v1.MsgExchangeToPlatformTokenResponse")
	proto.RegisterType((*MsgSetExchangeRate)(nil), "cysicmint.govtoken.v1.MsgSetExchangeRate")
	proto.RegisterType((*MsgSetExchangeRateResponse)(nil), "cysicmint.govtoken.v1.MsgSetExchangeRateResponse")
	proto.RegisterType((*MsgStakeAsValidator)(nil), "cysicmint.govtoken.v1.MsgStakeAsValidator")
	proto.RegisterType((*MsgStakeAsValidatorResponse)(nil), "cysicmint.govtoken.v1.MsgStakeAsValidatorResponse")
	proto.RegisterType((*MsgDelegateToValidator)(nil), "cysicmint.govtoken.v1.MsgDelegateToValidator")
	proto.RegisterType((*MsgDelegateToValidatorResponse)(nil), "cysicmint.govtoken.v1.MsgDelegateToValidatorResponse")
}

func init() { proto.RegisterFile("cysicmint/govtoken/v1/tx.proto", fileDescriptor_65790aa7cc6b2fc7) }

var fileDescriptor_65790aa7cc6b2fc7 = []byte{
	// 1058 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x57, 0xcb, 0x6e, 0xdb, 0x46,
	0x14, 0x35, 0x6d, 0xc7, 0xb6, 0x6e, 0x11, 0x3f, 0xe8, 0x47, 0x54, 0xda, 0x96, 0x03, 0x06, 0x6e,
	0xed, 0x38, 0x26, 0x23, 0xdb, 0x45, 0x1f, 0x59, 0xd9, 0x71, 0x5b, 0x34, 0x80, 0xd2, 0x80, 0x31,
	0xba, 0xe8, 0x86, 0x1d, 0x89, 0x63, 0x9a, 0x10, 0x39, 0x23, 0x70, 0x46, 0x0f, 0x03, 0xdd, 0xb4,
	0x40, 0xbb, 0x0e, 0xd0, 0x2f, 0xe8, 0x22, 0xcb, 0x2e, 0xfa, 0x09, 0xdd, 0x65, 0x19, 0xa0, 0x9b,
	0xa2, 0x0b, 0xa3, 0xb0, 0xfb, 0x05, 0x5d, 0x74, 0xdb, 0x82, 0x43, 0x6a, 0x28, 0xc9, 0xa2, 0x2c,
	0x03, 0x89, 0x77, 0xe4, 0x3d, 0xe7, 0xce, 0x39, 0xf7, 0x72, 0x66, 0xae, 0x04, 0x85, 0xca, 0x29,
	0xf3, 0x2a, 0x81, 0x47, 0xb8, 0xe9, 0xd2, 0x06, 0xa7, 0x55, 0x4c, 0xcc, 0x46, 0xd1, 0xe4, 0x2d,
	0xa3, 0x16, 0x52, 0x4e, 0xd5, 0x45, 0x89, 0x1b, 0x6d, 0xdc, 0x68, 0x14, 0x35, 0xad, 0x42, 0x59,
	0x40, 0x99, 0xc9, 0x5b, 0x66, 0xa3, 0x58, 0xc6, 0x1c, 0xa5, 0x29, 0xda, 0x82, 0x4b, 0x5d, 0x2a,
	0x1e, 0xcd, 0xe8, 0x29, 0x89, 0xae, 0xb8, 0x94, 0xba, 0x3e, 0x36, 0x51, 0xcd, 0x33, 0x11, 0x21,
	0x94, 0x23, 0xee, 0x51, 0xc2, 0x62, 0x54, 0xff, 0x41, 0x81, 0xc9, 0x12, 0x73, 0x4b, 0x1e, 0xe1,
	0xea, 0x02, 0xdc, 0xa2, 0x4d, 0x82, 0xc3, 0xbc, 0x72, 0x57, 0xd9, 0xc8, 0x59, 0xf1, 0x8b, 0xba,
	0x02, 0xb9, 0x10, 0x57, 0xbc, 0x9a, 0x87, 0x09, 0xcf, 0x8f, 0x0a, 0x24, 0x0d, 0xa8, 0x9f, 0xc1,
	0x04, 0x0a, 0x68, 0x9d, 0xf0, 0xfc, 0x58, 0x04, 0x1d, 0x18, 0xaf, 0xce, 0xd6, 0x46, 0xfe, 0x3c,
	0x5b, 0x5b, 0x8c, 0x7d, 0x32, 0xa7, 0x6a, 0x78, 0xd4, 0x0c, 0x10, 0x3f, 0x31, 0xbe, 0x20, 0xfc,
	0x9f, 0xb3, 0xb5, 0xdb, 0xa7, 0x28, 0xf0, 0x3f, 0xd1, 0xe3, 0x24, 0xdd, 0x4a, 0xb2, 0xf5, 0x39,
	0x98, 0x49, 0x6c, 0x58, 0x98, 0xd5, 0x28, 0x61, 0x58, 0xf7, 0x84, 0xb3, 0x83, 0x7a, 0x48, 0xd4,
	0x25, 0x98, 0x28, 0xd7, 0xc3, 0xd4, 0x5a, 0xf2, 0xd6, 0xa1, 0x3e, 0xfa, 0x06, 0xd4, 0x23, 0x29,
	0xa9, 0xfe, 0x04, 0xa6, 0x4b, 0xcc, 0x7d, 0x7c, 0x82, 0x88, 0x8b, 0xbf, 0x14, 0x8d, 0x58, 0x86,
	0x1c, 0xf5, 0x1d, 0xbb, 0xb3, 0x45, 0x53, 0xd4, 0x77, 0x24, 0x48, 0x70, 0x33, 0x01, 0xe3, 0x2e,
	0x4d, 0x11, 0xdc, 0x14, 0xa0, 0x9e, 0x87, 0xa5, 0xee, 0xb5, 0xa4, 0x4a, 0x13, 0x16, 0x4b, 0xcc,
	0xfd, 0xb4, 0x55, 0x11, 0xd8, 0x11, 0xfd, 0x9c, 0x36, 0x8e, 0xa2, 0x4f, 0x1d, 0x55, 0xcc, 0x30,
	0x71, 0xd2, 0x8a, 0xe3, 0xb7, 0x37, 0x56, 0xf1, 0x77, 0x0a, 0xac, 0xf6, 0x55, 0x6e, 0x5b, 0x53,
	0xbf, 0x81, 0x99, 0x10, 0x57, 0xb0, 0xd7, 0xc0, 0x8e, 0x9d, 0x48, 0x0a, 0x2b, 0x07, 0x1f, 0x5e,
	0x25, 0xb9, 0x14, 0x4b, 0xf6, 0x64, 0xeb, 0xd6, 0x74, 0x3b, 0xb2, 0x1f, 0x07, 0xbe, 0x05, 0xad,
	0xcb, 0xc2, 0x33, 0x1f, 0xf1, 0x63, 0x1a, 0x06, 0x37, 0xd3, 0x81, 0x1f, 0x15, 0xd0, 0xb3, 0xe5,
	0x6f, 0xb0, 0x0d, 0x2d, 0x50, 0x4b, 0xcc, 0x7d, 0x8e, 0x79, 0xdb, 0x8a, 0x85, 0x38, 0xce, 0x38,
	0x8c, 0xab, 0x00, 0xc7, 0x21, 0x0d, 0x6c, 0x07, 0x13, 0x1a, 0xb4, 0x4f, 0x63, 0x14, 0x39, 0x8c,
	0x02, 0xea, 0xbb, 0x30, 0xc5, 0x69, 0x02, 0x8a, 0xf3, 0x68, 0x4d, 0x72, 0x1a, 0x43, 0x2a, 0x8c,
	0x87, 0x88, 0xe3, 0xfc, 0xf8, 0x5d, 0x65, 0x63, 0xdc, 0x12, 0xcf, 0xfa, 0x8a, 0xf8, 0x00, 0x3d,
	0xca, 0x72, 0x6f, 0xfe, 0x37, 0x06, 0xf3, 0x11, 0xcc, 0x51, 0x15, 0xef, 0xb3, 0xaf, 0x90, 0xef,
	0x39, 0x88, 0xd3, 0xf0, 0x6d, 0x7f, 0x18, 0x75, 0x1d, 0xa6, 0x1b, 0x6d, 0x31, 0x9b, 0xa0, 0x00,
	0x27, 0xa5, 0xdc, 0x96, 0xd1, 0xa7, 0x28, 0xc0, 0xea, 0x2e, 0x2c, 0xa6, 0x34, 0x07, 0xb3, 0x4a,
	0xe8, 0xd5, 0xa2, 0x9b, 0x4d, 0x54, 0x98, 0xb3, 0x16, 0x24, 0x78, 0x98, 0x62, 0xea, 0xfb, 0x30,
	0x53, 0xa1, 0x41, 0xe0, 0x31, 0xe6, 0x51, 0x62, 0x8b, 0x86, 0xdc, 0x12, 0xf4, 0xe9, 0x34, 0x2c,
	0xda, 0x6f, 0xc0, 0x7c, 0x80, 0x5a, 0x76, 0x2f, 0x79, 0x42, 0x90, 0xe7, 0x02, 0xd4, 0x7a, 0xdc,
	0xcd, 0x7f, 0x04, 0x9a, 0xe0, 0x8b, 0x36, 0x5e, 0x4a, 0x9b, 0x14, 0x69, 0x77, 0xa2, 0x34, 0x41,
	0xe8, 0x49, 0xde, 0x84, 0xd9, 0xb4, 0x94, 0x5a, 0xbd, 0x5c, 0xc5, 0xa7, 0xf9, 0x29, 0x91, 0x32,
	0x23, 0xe3, 0xcf, 0x44, 0x58, 0xad, 0xc2, 0x7c, 0xe0, 0x11, 0x9b, 0x61, 0xff, 0xd8, 0x76, 0xb0,
	0x8f, 0x5d, 0x71, 0x9b, 0xe7, 0x73, 0xa2, 0xe3, 0x8f, 0xae, 0xea, 0xb8, 0x16, 0x77, 0xbc, 0xcf,
	0x0a, 0xba, 0x35, 0x17, 0x78, 0xe4, 0x39, 0xf6, 0x8f, 0x0f, 0xd3, 0xd8, 0x13, 0x58, 0xee, 0xb3,
	0x01, 0xe4, 0xd1, 0xd8, 0x82, 0xb9, 0xc4, 0x9e, 0x28, 0x14, 0xb3, 0xba, 0x9f, 0x1c, 0x0e, 0x6b,
	0x36, 0x05, 0x2c, 0x11, 0xd7, 0x5f, 0x2a, 0xe2, 0x12, 0x4c, 0x56, 0xc7, 0x47, 0xf4, 0xe6, 0x36,
	0x54, 0xea, 0x93, 0x86, 0x36, 0x72, 0x9c, 0x10, 0x33, 0x96, 0xec, 0xa9, 0xb4, 0xef, 0xfb, 0x71,
	0x5c, 0x2f, 0x41, 0xa1, 0xbf, 0xcd, 0xce, 0xb2, 0xd3, 0xbe, 0xf5, 0x94, 0x9d, 0x02, 0x71, 0xd9,
	0x3b, 0xff, 0xe6, 0x60, 0xac, 0xc4, 0x5c, 0x95, 0xc1, 0xb8, 0x98, 0xb1, 0x05, 0xa3, 0xef, 0x5c,
	0x37, 0x92, 0xe1, 0xa7, 0xbd, 0x37, 0x18, 0x97, 0x87, 0xf3, 0xde, 0xf7, 0xbf, 0xff, 0xfd, 0xd3,
	0xe8, 0xaa, 0xbe, 0x6c, 0xf6, 0xff, 0x1d, 0x11, 0x05, 0x22, 0x51, 0x31, 0x3e, 0x07, 0x88, 0x46,
	0xf8, 0x20, 0xd1, 0xae, 0x99, 0x78, 0x95, 0x68, 0x34, 0x95, 0xd5, 0x17, 0x0a, 0xbc, 0xd3, 0x39,
	0x36, 0xd7, 0xb3, 0x17, 0xef, 0xa0, 0x69, 0xdb, 0x43, 0xd1, 0xa4, 0x95, 0x2d, 0x61, 0x65, 0x5d,
	0xbf, 0x97, 0x61, 0x25, 0x39, 0x88, 0xf1, 0xad, 0xf9, 0x8b, 0x02, 0x6a, 0x9f, 0x19, 0xfb, 0x20,
	0x5b, 0xf2, 0x32, 0x5b, 0xdb, 0xbb, 0x0e, 0x5b, 0xfa, 0xdc, 0x15, 0x3e, 0xb7, 0xf5, 0xad, 0x0c,
	0x9f, 0x38, 0x49, 0xb5, 0x39, 0xb5, 0xdb, 0x71, 0xf5, 0x37, 0x05, 0xee, 0x64, 0x8d, 0xc5, 0xe2,
	0x30, 0x36, 0xba, 0x52, 0xb4, 0x8f, 0xaf, 0x9d, 0x22, 0xed, 0x7f, 0x24, 0xec, 0xef, 0xe8, 0x0f,
	0x87, 0xb0, 0x5f, 0x4b, 0x56, 0x88, 0x6b, 0xf8, 0x59, 0x81, 0x99, 0xde, 0x99, 0xb6, 0x99, 0x6d,
	0xa4, 0x87, 0xaa, 0x15, 0x87, 0xa6, 0x4a, 0xaf, 0x0f, 0x85, 0xd7, 0xfb, 0xfa, 0x46, 0x86, 0x57,
	0x86, 0xb9, 0x2d, 0xfd, 0x46, 0xd7, 0xb2, 0xfa, 0x52, 0x81, 0xd9, 0x4b, 0xe3, 0xed, 0xfe, 0x00,
	0xe5, 0x1e, 0xae, 0xb6, 0x33, 0x3c, 0x57, 0xda, 0x2c, 0x0a, 0x9b, 0x5b, 0xfa, 0x66, 0x96, 0xcd,
	0x28, 0xd1, 0x46, 0xcc, 0x96, 0x57, 0x93, 0xfa, 0xab, 0x02, 0xf3, 0xfd, 0x2e, 0xce, 0x01, 0x67,
	0xa6, 0x0f, 0x5d, 0xfb, 0xe0, 0x5a, 0x74, 0x69, 0x78, 0x4f, 0x18, 0x36, 0xf4, 0x07, 0x19, 0x86,
	0x93, 0x3b, 0x4f, 0xec, 0x01, 0xe9, 0xf9, 0xe0, 0xe9, 0xab, 0xf3, 0x82, 0xf2, 0xfa, 0xbc, 0xa0,
	0xfc, 0x75, 0x5e, 0x50, 0x5e, 0x5c, 0x14, 0x46, 0x5e, 0x5f, 0x14, 0x46, 0xfe, 0xb8, 0x28, 0x8c,
	0x7c, 0xbd, 0xe7, 0x7a, 0xfc, 0xa4, 0x5e, 0x36, 0x2a, 0x34, 0x88, 0x57, 0xdc, 0xf6, 0x51, 0x99,
	0x25, 0x8f, 0x04, 0xf3, 0x26, 0x0d, 0xab, 0x66, 0x2b, 0x95, 0xe0, 0xa7, 0x35, 0xcc, 0xca, 0x13,
	0xe2, 0xff, 0xca, 0xee, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0xfb, 0xf1, 0x08, 0x51, 0x38, 0x0d,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// Mint
	Mint(ctx context.Context, in *MsgMint, opts ...grpc.CallOption) (*MsgMintResponse, error)
	// Burn
	Burn(ctx context.Context, in *MsgBurn, opts ...grpc.CallOption) (*MsgBurnResponse, error)
	// ChangeOwner
	ChangeOwner(ctx context.Context, in *MsgChangeOwner, opts ...grpc.CallOption) (*MsgChangeOwnerResponse, error)
	// ExchangeToGovToken
	ExchangeToGovToken(ctx context.Context, in *MsgExchangeToGovToken, opts ...grpc.CallOption) (*MsgExchangeToGovTokenResponse, error)
	// ExchangeToPlatformToken
	ExchangeToPlatformToken(ctx context.Context, in *MsgExchangeToPlatformToken, opts ...grpc.CallOption) (*MsgExchangeToPlatformTokenResponse, error)
	// SetExchangeRate
	SetExchangeRate(ctx context.Context, in *MsgSetExchangeRate, opts ...grpc.CallOption) (*MsgSetExchangeRateResponse, error)
	// StakeAsValidator
	StakeAsValidator(ctx context.Context, in *MsgStakeAsValidator, opts ...grpc.CallOption) (*MsgStakeAsValidatorResponse, error)
	// DelegateToValidator
	DelegateToValidator(ctx context.Context, in *MsgDelegateToValidator, opts ...grpc.CallOption) (*MsgDelegateToValidatorResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) Mint(ctx context.Context, in *MsgMint, opts ...grpc.CallOption) (*MsgMintResponse, error) {
	out := new(MsgMintResponse)
	err := c.cc.Invoke(ctx, "/cysicmint.govtoken.v1.Msg/Mint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Burn(ctx context.Context, in *MsgBurn, opts ...grpc.CallOption) (*MsgBurnResponse, error) {
	out := new(MsgBurnResponse)
	err := c.cc.Invoke(ctx, "/cysicmint.govtoken.v1.Msg/Burn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ChangeOwner(ctx context.Context, in *MsgChangeOwner, opts ...grpc.CallOption) (*MsgChangeOwnerResponse, error) {
	out := new(MsgChangeOwnerResponse)
	err := c.cc.Invoke(ctx, "/cysicmint.govtoken.v1.Msg/ChangeOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ExchangeToGovToken(ctx context.Context, in *MsgExchangeToGovToken, opts ...grpc.CallOption) (*MsgExchangeToGovTokenResponse, error) {
	out := new(MsgExchangeToGovTokenResponse)
	err := c.cc.Invoke(ctx, "/cysicmint.govtoken.v1.Msg/ExchangeToGovToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ExchangeToPlatformToken(ctx context.Context, in *MsgExchangeToPlatformToken, opts ...grpc.CallOption) (*MsgExchangeToPlatformTokenResponse, error) {
	out := new(MsgExchangeToPlatformTokenResponse)
	err := c.cc.Invoke(ctx, "/cysicmint.govtoken.v1.Msg/ExchangeToPlatformToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetExchangeRate(ctx context.Context, in *MsgSetExchangeRate, opts ...grpc.CallOption) (*MsgSetExchangeRateResponse, error) {
	out := new(MsgSetExchangeRateResponse)
	err := c.cc.Invoke(ctx, "/cysicmint.govtoken.v1.Msg/SetExchangeRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) StakeAsValidator(ctx context.Context, in *MsgStakeAsValidator, opts ...grpc.CallOption) (*MsgStakeAsValidatorResponse, error) {
	out := new(MsgStakeAsValidatorResponse)
	err := c.cc.Invoke(ctx, "/cysicmint.govtoken.v1.Msg/StakeAsValidator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DelegateToValidator(ctx context.Context, in *MsgDelegateToValidator, opts ...grpc.CallOption) (*MsgDelegateToValidatorResponse, error) {
	out := new(MsgDelegateToValidatorResponse)
	err := c.cc.Invoke(ctx, "/cysicmint.govtoken.v1.Msg/DelegateToValidator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// Mint
	Mint(context.Context, *MsgMint) (*MsgMintResponse, error)
	// Burn
	Burn(context.Context, *MsgBurn) (*MsgBurnResponse, error)
	// ChangeOwner
	ChangeOwner(context.Context, *MsgChangeOwner) (*MsgChangeOwnerResponse, error)
	// ExchangeToGovToken
	ExchangeToGovToken(context.Context, *MsgExchangeToGovToken) (*MsgExchangeToGovTokenResponse, error)
	// ExchangeToPlatformToken
	ExchangeToPlatformToken(context.Context, *MsgExchangeToPlatformToken) (*MsgExchangeToPlatformTokenResponse, error)
	// SetExchangeRate
	SetExchangeRate(context.Context, *MsgSetExchangeRate) (*MsgSetExchangeRateResponse, error)
	// StakeAsValidator
	StakeAsValidator(context.Context, *MsgStakeAsValidator) (*MsgStakeAsValidatorResponse, error)
	// DelegateToValidator
	DelegateToValidator(context.Context, *MsgDelegateToValidator) (*MsgDelegateToValidatorResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) Mint(ctx context.Context, req *MsgMint) (*MsgMintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mint not implemented")
}
func (*UnimplementedMsgServer) Burn(ctx context.Context, req *MsgBurn) (*MsgBurnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Burn not implemented")
}
func (*UnimplementedMsgServer) ChangeOwner(ctx context.Context, req *MsgChangeOwner) (*MsgChangeOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeOwner not implemented")
}
func (*UnimplementedMsgServer) ExchangeToGovToken(ctx context.Context, req *MsgExchangeToGovToken) (*MsgExchangeToGovTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeToGovToken not implemented")
}
func (*UnimplementedMsgServer) ExchangeToPlatformToken(ctx context.Context, req *MsgExchangeToPlatformToken) (*MsgExchangeToPlatformTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeToPlatformToken not implemented")
}
func (*UnimplementedMsgServer) SetExchangeRate(ctx context.Context, req *MsgSetExchangeRate) (*MsgSetExchangeRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetExchangeRate not implemented")
}
func (*UnimplementedMsgServer) StakeAsValidator(ctx context.Context, req *MsgStakeAsValidator) (*MsgStakeAsValidatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StakeAsValidator not implemented")
}
func (*UnimplementedMsgServer) DelegateToValidator(ctx context.Context, req *MsgDelegateToValidator) (*MsgDelegateToValidatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegateToValidator not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_Mint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Mint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cysicmint.govtoken.v1.Msg/Mint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Mint(ctx, req.(*MsgMint))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Burn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBurn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Burn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cysicmint.govtoken.v1.Msg/Burn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Burn(ctx, req.(*MsgBurn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ChangeOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgChangeOwner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ChangeOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cysicmint.govtoken.v1.Msg/ChangeOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ChangeOwner(ctx, req.(*MsgChangeOwner))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ExchangeToGovToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgExchangeToGovToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ExchangeToGovToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cysicmint.govtoken.v1.Msg/ExchangeToGovToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ExchangeToGovToken(ctx, req.(*MsgExchangeToGovToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ExchangeToPlatformToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgExchangeToPlatformToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ExchangeToPlatformToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cysicmint.govtoken.v1.Msg/ExchangeToPlatformToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ExchangeToPlatformToken(ctx, req.(*MsgExchangeToPlatformToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetExchangeRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetExchangeRate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetExchangeRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cysicmint.govtoken.v1.Msg/SetExchangeRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetExchangeRate(ctx, req.(*MsgSetExchangeRate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_StakeAsValidator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgStakeAsValidator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).StakeAsValidator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cysicmint.govtoken.v1.Msg/StakeAsValidator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).StakeAsValidator(ctx, req.(*MsgStakeAsValidator))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DelegateToValidator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDelegateToValidator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DelegateToValidator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cysicmint.govtoken.v1.Msg/DelegateToValidator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DelegateToValidator(ctx, req.(*MsgDelegateToValidator))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cysicmint.govtoken.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Mint",
			Handler:    _Msg_Mint_Handler,
		},
		{
			MethodName: "Burn",
			Handler:    _Msg_Burn_Handler,
		},
		{
			MethodName: "ChangeOwner",
			Handler:    _Msg_ChangeOwner_Handler,
		},
		{
			MethodName: "ExchangeToGovToken",
			Handler:    _Msg_ExchangeToGovToken_Handler,
		},
		{
			MethodName: "ExchangeToPlatformToken",
			Handler:    _Msg_ExchangeToPlatformToken_Handler,
		},
		{
			MethodName: "SetExchangeRate",
			Handler:    _Msg_SetExchangeRate_Handler,
		},
		{
			MethodName: "StakeAsValidator",
			Handler:    _Msg_StakeAsValidator_Handler,
		},
		{
			MethodName: "DelegateToValidator",
			Handler:    _Msg_DelegateToValidator_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cysicmint/govtoken/v1/tx.proto",
}

func (m *MsgMint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMintResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMintResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMintResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgBurn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBurn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBurn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Burner) > 0 {
		i -= len(m.Burner)
		copy(dAtA[i:], m.Burner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Burner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBurnResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBurnResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBurnResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgChangeOwner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgChangeOwner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgChangeOwner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewOwner) > 0 {
		i -= len(m.NewOwner)
		copy(dAtA[i:], m.NewOwner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewOwner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OldOwner) > 0 {
		i -= len(m.OldOwner)
		copy(dAtA[i:], m.OldOwner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OldOwner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgChangeOwnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgChangeOwnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgChangeOwnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgExchangeToGovToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgExchangeToGovToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgExchangeToGovToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgExchangeToGovTokenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgExchangeToGovTokenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgExchangeToGovTokenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.ReceivedAmount.Size()
		i -= size
		if _, err := m.ReceivedAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgExchangeToPlatformToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgExchangeToPlatformToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgExchangeToPlatformToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgExchangeToPlatformTokenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgExchangeToPlatformTokenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgExchangeToPlatformTokenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.ReceivedAmount.Size()
		i -= size
		if _, err := m.ReceivedAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgSetExchangeRate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetExchangeRate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetExchangeRate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Rate != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Rate))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ToDenom) > 0 {
		i -= len(m.ToDenom)
		copy(dAtA[i:], m.ToDenom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ToDenom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FromDenom) > 0 {
		i -= len(m.FromDenom)
		copy(dAtA[i:], m.FromDenom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetExchangeRateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetExchangeRateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetExchangeRateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgStakeAsValidator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgStakeAsValidator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgStakeAsValidator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MinSelfDelegation.Size()
		i -= size
		if _, err := m.MinSelfDelegation.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if len(m.ValidatorPubkey) > 0 {
		i -= len(m.ValidatorPubkey)
		copy(dAtA[i:], m.ValidatorPubkey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ValidatorPubkey)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.MaxChangeCommissionRate) > 0 {
		i -= len(m.MaxChangeCommissionRate)
		copy(dAtA[i:], m.MaxChangeCommissionRate)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MaxChangeCommissionRate)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.MaxCommissionRate) > 0 {
		i -= len(m.MaxCommissionRate)
		copy(dAtA[i:], m.MaxCommissionRate)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MaxCommissionRate)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.CommissionRate) > 0 {
		i -= len(m.CommissionRate)
		copy(dAtA[i:], m.CommissionRate)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CommissionRate)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ValidatorDescription) > 0 {
		i -= len(m.ValidatorDescription)
		copy(dAtA[i:], m.ValidatorDescription)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ValidatorDescription)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ValidatorName) > 0 {
		i -= len(m.ValidatorName)
		copy(dAtA[i:], m.ValidatorName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ValidatorName)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgStakeAsValidatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgStakeAsValidatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgStakeAsValidatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidationResult) > 0 {
		i -= len(m.ValidationResult)
		copy(dAtA[i:], m.ValidationResult)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ValidationResult)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDelegateToValidator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDelegateToValidator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDelegateToValidator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDelegateToValidatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDelegateToValidatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDelegateToValidatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DelegationResult) > 0 {
		i -= len(m.DelegationResult)
		copy(dAtA[i:], m.DelegationResult)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DelegationResult)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgMint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgMintResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgBurn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Burner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgBurnResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgChangeOwner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OldOwner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewOwner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgChangeOwnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgExchangeToGovToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgExchangeToGovTokenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ReceivedAmount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgExchangeToPlatformToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgExchangeToPlatformTokenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ReceivedAmount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgSetExchangeRate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.FromDenom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ToDenom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Rate != 0 {
		n += 1 + sovTx(uint64(m.Rate))
	}
	return n
}

func (m *MsgSetExchangeRateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgStakeAsValidator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.ValidatorName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ValidatorDescription)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CommissionRate)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MaxCommissionRate)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MaxChangeCommissionRate)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ValidatorPubkey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.MinSelfDelegation.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgStakeAsValidatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidationResult)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDelegateToValidator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDelegateToValidatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegationResult)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgMint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMintResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMintResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMintResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBurn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBurn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBurn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Burner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Burner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBurnResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBurnResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBurnResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgChangeOwner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgChangeOwner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgChangeOwner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldOwner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OldOwner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewOwner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewOwner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgChangeOwnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgChangeOwnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgChangeOwnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgExchangeToGovToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgExchangeToGovToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgExchangeToGovToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgExchangeToGovTokenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgExchangeToGovTokenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgExchangeToGovTokenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceivedAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReceivedAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgExchangeToPlatformToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgExchangeToPlatformToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgExchangeToPlatformToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgExchangeToPlatformTokenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgExchangeToPlatformTokenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgExchangeToPlatformTokenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceivedAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReceivedAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetExchangeRate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetExchangeRate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetExchangeRate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			m.Rate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rate |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetExchangeRateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetExchangeRateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetExchangeRateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgStakeAsValidator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgStakeAsValidator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgStakeAsValidator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommissionRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommissionRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxCommissionRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxCommissionRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxChangeCommissionRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxChangeCommissionRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorPubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorPubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinSelfDelegation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinSelfDelegation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgStakeAsValidatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgStakeAsValidatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgStakeAsValidatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidationResult", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidationResult = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDelegateToValidator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDelegateToValidator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDelegateToValidator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDelegateToValidatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDelegateToValidatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDelegateToValidatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationResult", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegationResult = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
