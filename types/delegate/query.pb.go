// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cysicmint/delegate/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryDelegateBindRequest defines the request for querying x/delegate bind relationship.
type QueryDelegateBindRequest struct {
	// epoch is the epoch for query
	Epoch int64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// worker is worker for query
	Worker string `protobuf:"bytes,2,opt,name=worker,proto3" json:"worker,omitempty"`
	// token is the token for bind
	Token string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *QueryDelegateBindRequest) Reset()         { *m = QueryDelegateBindRequest{} }
func (m *QueryDelegateBindRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDelegateBindRequest) ProtoMessage()    {}
func (*QueryDelegateBindRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6994c96bd79ea9e, []int{0}
}
func (m *QueryDelegateBindRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegateBindRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegateBindRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegateBindRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegateBindRequest.Merge(m, src)
}
func (m *QueryDelegateBindRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegateBindRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegateBindRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegateBindRequest proto.InternalMessageInfo

func (m *QueryDelegateBindRequest) GetEpoch() int64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *QueryDelegateBindRequest) GetWorker() string {
	if m != nil {
		return m.Worker
	}
	return ""
}

func (m *QueryDelegateBindRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// QueryDelegateBindResponse defines the response type for querying x/delegate bind relationship.
type QueryDelegateBindResponse struct {
	// validator is the worker bind to
	Validator string `protobuf:"bytes,1,opt,name=validator,proto3" json:"validator,omitempty"`
	// amount is the bind amout
	Amount string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *QueryDelegateBindResponse) Reset()         { *m = QueryDelegateBindResponse{} }
func (m *QueryDelegateBindResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDelegateBindResponse) ProtoMessage()    {}
func (*QueryDelegateBindResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6994c96bd79ea9e, []int{1}
}
func (m *QueryDelegateBindResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegateBindResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegateBindResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegateBindResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegateBindResponse.Merge(m, src)
}
func (m *QueryDelegateBindResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegateBindResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegateBindResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegateBindResponse proto.InternalMessageInfo

func (m *QueryDelegateBindResponse) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

func (m *QueryDelegateBindResponse) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

// QueryDelegateCValueRequest defines the request for querying x/delegate cc value.
type QueryDelegateCValueRequest struct {
	// epoch is the epoch for query
	Epoch int64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// validator is validator for query
	Validator string `protobuf:"bytes,2,opt,name=validator,proto3" json:"validator,omitempty"`
}

func (m *QueryDelegateCValueRequest) Reset()         { *m = QueryDelegateCValueRequest{} }
func (m *QueryDelegateCValueRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDelegateCValueRequest) ProtoMessage()    {}
func (*QueryDelegateCValueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6994c96bd79ea9e, []int{2}
}
func (m *QueryDelegateCValueRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegateCValueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegateCValueRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegateCValueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegateCValueRequest.Merge(m, src)
}
func (m *QueryDelegateCValueRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegateCValueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegateCValueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegateCValueRequest proto.InternalMessageInfo

func (m *QueryDelegateCValueRequest) GetEpoch() int64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *QueryDelegateCValueRequest) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

// QueryDelegateCValueResponse defines the response type for querying x/delegate cc value.
type QueryDelegateCValueResponse struct {
	// c_value is the result
	CValue string `protobuf:"bytes,1,opt,name=c_value,json=cValue,proto3" json:"c_value,omitempty"`
}

func (m *QueryDelegateCValueResponse) Reset()         { *m = QueryDelegateCValueResponse{} }
func (m *QueryDelegateCValueResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDelegateCValueResponse) ProtoMessage()    {}
func (*QueryDelegateCValueResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6994c96bd79ea9e, []int{3}
}
func (m *QueryDelegateCValueResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegateCValueResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegateCValueResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegateCValueResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegateCValueResponse.Merge(m, src)
}
func (m *QueryDelegateCValueResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegateCValueResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegateCValueResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegateCValueResponse proto.InternalMessageInfo

func (m *QueryDelegateCValueResponse) GetCValue() string {
	if m != nil {
		return m.CValue
	}
	return ""
}

// MsgCValue define base ccvalue struct
type MsgCValue struct {
	// worker defile worker address
	Worker string `protobuf:"bytes,1,opt,name=worker,proto3" json:"worker,omitempty"`
	// c_value is the c_value for delegate
	CValue string `protobuf:"bytes,2,opt,name=c_value,json=cValue,proto3" json:"c_value,omitempty"`
}

func (m *MsgCValue) Reset()         { *m = MsgCValue{} }
func (m *MsgCValue) String() string { return proto.CompactTextString(m) }
func (*MsgCValue) ProtoMessage()    {}
func (*MsgCValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6994c96bd79ea9e, []int{4}
}
func (m *MsgCValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCValue.Merge(m, src)
}
func (m *MsgCValue) XXX_Size() int {
	return m.Size()
}
func (m *MsgCValue) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCValue.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCValue proto.InternalMessageInfo

func (m *MsgCValue) GetWorker() string {
	if m != nil {
		return m.Worker
	}
	return ""
}

func (m *MsgCValue) GetCValue() string {
	if m != nil {
		return m.CValue
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryDelegateBindRequest)(nil), "cysicmint.delegate.v1.QueryDelegateBindRequest")
	proto.RegisterType((*QueryDelegateBindResponse)(nil), "cysicmint.delegate.v1.QueryDelegateBindResponse")
	proto.RegisterType((*QueryDelegateCValueRequest)(nil), "cysicmint.delegate.v1.QueryDelegateCValueRequest")
	proto.RegisterType((*QueryDelegateCValueResponse)(nil), "cysicmint.delegate.v1.QueryDelegateCValueResponse")
	proto.RegisterType((*MsgCValue)(nil), "cysicmint.delegate.v1.MsgCValue")
}

func init() { proto.RegisterFile("cysicmint/delegate/v1/query.proto", fileDescriptor_c6994c96bd79ea9e) }

var fileDescriptor_c6994c96bd79ea9e = []byte{
	// 415 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x3d, 0x6f, 0xda, 0x40,
	0x18, 0xe6, 0x8c, 0xa0, 0xf2, 0x6d, 0xbd, 0x7e, 0xb9, 0x86, 0x5a, 0xd4, 0x95, 0x2a, 0x96, 0xfa,
	0x0a, 0xad, 0x3a, 0x75, 0xa2, 0x5d, 0x5b, 0x15, 0x0f, 0x1d, 0x3a, 0xb4, 0x3a, 0x9b, 0x93, 0xb1,
	0x30, 0x77, 0xc6, 0x77, 0x76, 0xc3, 0x9a, 0x5f, 0x10, 0x29, 0x63, 0xd6, 0xfc, 0x98, 0x0c, 0x19,
	0x90, 0xb2, 0x64, 0x8c, 0x20, 0x3f, 0x24, 0xf2, 0x07, 0x01, 0x27, 0x26, 0x22, 0x9b, 0xdf, 0x57,
	0xcf, 0x97, 0x9f, 0xd7, 0x86, 0x6f, 0xdd, 0xb9, 0xf0, 0xdd, 0xa9, 0xcf, 0x24, 0x1e, 0xd1, 0x80,
	0x7a, 0x44, 0x52, 0x9c, 0xf4, 0xf0, 0x2c, 0xa6, 0xd1, 0xdc, 0x0a, 0x23, 0x2e, 0x39, 0x7a, 0x71,
	0x0b, 0xb1, 0xd6, 0x10, 0x2b, 0xe9, 0xe9, 0x6d, 0x8f, 0x73, 0x2f, 0xa0, 0x98, 0x84, 0x3e, 0x26,
	0x8c, 0x71, 0x49, 0xa4, 0xcf, 0x99, 0xc8, 0x49, 0xe6, 0x5f, 0xa8, 0x0d, 0x53, 0x8d, 0xef, 0x05,
	0x63, 0xe0, 0xb3, 0x91, 0x4d, 0x67, 0x31, 0x15, 0x12, 0x3d, 0x87, 0x0d, 0x1a, 0x72, 0x77, 0xac,
	0x81, 0x0e, 0xe8, 0xd6, 0xed, 0x7c, 0x40, 0x2f, 0x61, 0xf3, 0x3f, 0x8f, 0x26, 0x34, 0xd2, 0x94,
	0x0e, 0xe8, 0xaa, 0x76, 0x31, 0xa5, 0x68, 0xc9, 0x27, 0x94, 0x69, 0xf5, 0x6c, 0x9d, 0x0f, 0xe6,
	0x10, 0xbe, 0xae, 0xd0, 0x17, 0x21, 0x67, 0x82, 0xa2, 0x36, 0x54, 0x13, 0x12, 0xf8, 0x23, 0x22,
	0x79, 0x94, 0x99, 0xa8, 0xf6, 0x66, 0x91, 0x1a, 0x91, 0x29, 0x8f, 0x99, 0x5c, 0x1b, 0xe5, 0x93,
	0xf9, 0x0b, 0xea, 0x25, 0xc9, 0x6f, 0xbf, 0x49, 0x10, 0xd3, 0x87, 0x43, 0x97, 0x9c, 0x94, 0x3b,
	0x4e, 0xe6, 0x17, 0xd8, 0xaa, 0x54, 0x2c, 0x62, 0xbe, 0x82, 0x4f, 0xdc, 0x7f, 0x49, 0xba, 0x2a,
	0x42, 0x36, 0xdd, 0x0c, 0x60, 0x7e, 0x85, 0xea, 0x0f, 0xe1, 0xe5, 0xe8, 0xad, 0x5e, 0x40, 0xa9,
	0x97, 0x2d, 0xb6, 0xb2, 0xcd, 0xee, 0x9f, 0x2b, 0xb0, 0x91, 0xd9, 0xa2, 0x13, 0x00, 0x9f, 0xde,
	0x6b, 0x09, 0x61, 0xab, 0xf2, 0xa0, 0xd6, 0xae, 0x7b, 0xe9, 0x1f, 0xf7, 0x27, 0xe4, 0x6f, 0x66,
	0xbe, 0x3b, 0xbc, 0xb8, 0x3e, 0x56, 0xde, 0xa0, 0x16, 0xae, 0xfe, 0xbc, 0x9c, 0x34, 0xc7, 0x29,
	0x80, 0xcf, 0x2a, 0xea, 0x41, 0xbd, 0x7d, 0xec, 0x4a, 0xc7, 0xd1, 0xfb, 0x8f, 0xa1, 0x14, 0x19,
	0xdf, 0x67, 0x19, 0x3b, 0xc8, 0xd8, 0x91, 0xb1, 0x28, 0x77, 0xf0, 0xf3, 0x6c, 0x69, 0x80, 0xc5,
	0xd2, 0x00, 0x57, 0x4b, 0x03, 0x1c, 0xad, 0x8c, 0xda, 0x62, 0x65, 0xd4, 0x2e, 0x57, 0x46, 0xed,
	0xcf, 0x67, 0xcf, 0x97, 0xe3, 0xd8, 0xb1, 0x5c, 0x3e, 0xcd, 0x35, 0x3e, 0x04, 0xc4, 0x11, 0xc5,
	0x23, 0xa3, 0x32, 0x3d, 0x14, 0x3e, 0xd8, 0x88, 0xca, 0x79, 0x48, 0x85, 0xd3, 0xcc, 0x7e, 0x90,
	0x4f, 0x37, 0x01, 0x00, 0x00, 0xff, 0xff, 0xbb, 0x18, 0xf1, 0x5d, 0x7a, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// QueryDelegateBind queries the delegate bind relationship of x/delegate module.
	QueryDelegateBind(ctx context.Context, in *QueryDelegateBindRequest, opts ...grpc.CallOption) (*QueryDelegateBindResponse, error)
	// QueryDelegateCValue queries the delegate ccvalue of x/delegate module.
	QueryDelegateCValue(ctx context.Context, in *QueryDelegateCValueRequest, opts ...grpc.CallOption) (*QueryDelegateCValueResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) QueryDelegateBind(ctx context.Context, in *QueryDelegateBindRequest, opts ...grpc.CallOption) (*QueryDelegateBindResponse, error) {
	out := new(QueryDelegateBindResponse)
	err := c.cc.Invoke(ctx, "/cysicmint.delegate.v1.Query/QueryDelegateBind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryDelegateCValue(ctx context.Context, in *QueryDelegateCValueRequest, opts ...grpc.CallOption) (*QueryDelegateCValueResponse, error) {
	out := new(QueryDelegateCValueResponse)
	err := c.cc.Invoke(ctx, "/cysicmint.delegate.v1.Query/QueryDelegateCValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// QueryDelegateBind queries the delegate bind relationship of x/delegate module.
	QueryDelegateBind(context.Context, *QueryDelegateBindRequest) (*QueryDelegateBindResponse, error)
	// QueryDelegateCValue queries the delegate ccvalue of x/delegate module.
	QueryDelegateCValue(context.Context, *QueryDelegateCValueRequest) (*QueryDelegateCValueResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) QueryDelegateBind(ctx context.Context, req *QueryDelegateBindRequest) (*QueryDelegateBindResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDelegateBind not implemented")
}
func (*UnimplementedQueryServer) QueryDelegateCValue(ctx context.Context, req *QueryDelegateCValueRequest) (*QueryDelegateCValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDelegateCValue not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_QueryDelegateBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegateBindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryDelegateBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cysicmint.delegate.v1.Query/QueryDelegateBind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryDelegateBind(ctx, req.(*QueryDelegateBindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryDelegateCValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegateCValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryDelegateCValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cysicmint.delegate.v1.Query/QueryDelegateCValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryDelegateCValue(ctx, req.(*QueryDelegateCValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cysicmint.delegate.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryDelegateBind",
			Handler:    _Query_QueryDelegateBind_Handler,
		},
		{
			MethodName: "QueryDelegateCValue",
			Handler:    _Query_QueryDelegateCValue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cysicmint/delegate/v1/query.proto",
}

func (m *QueryDelegateBindRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegateBindRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegateBindRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Worker) > 0 {
		i -= len(m.Worker)
		copy(dAtA[i:], m.Worker)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Worker)))
		i--
		dAtA[i] = 0x12
	}
	if m.Epoch != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegateBindResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegateBindResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegateBindResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegateCValueRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegateCValueRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegateCValueRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0x12
	}
	if m.Epoch != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegateCValueResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegateCValueResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegateCValueResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CValue) > 0 {
		i -= len(m.CValue)
		copy(dAtA[i:], m.CValue)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CValue)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CValue) > 0 {
		i -= len(m.CValue)
		copy(dAtA[i:], m.CValue)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CValue)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Worker) > 0 {
		i -= len(m.Worker)
		copy(dAtA[i:], m.Worker)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Worker)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryDelegateBindRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != 0 {
		n += 1 + sovQuery(uint64(m.Epoch))
	}
	l = len(m.Worker)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDelegateBindResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDelegateCValueRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != 0 {
		n += 1 + sovQuery(uint64(m.Epoch))
	}
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDelegateCValueResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CValue)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *MsgCValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Worker)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.CValue)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryDelegateBindRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegateBindRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegateBindRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Worker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Worker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegateBindResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegateBindResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegateBindResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegateCValueRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegateCValueRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegateCValueRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegateCValueResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegateCValueResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegateCValueResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Worker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Worker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
